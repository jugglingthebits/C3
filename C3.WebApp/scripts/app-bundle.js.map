{"version":3,"sources":["app.ts","environment.ts","C:/workspace/C3/C3.WebApp/src/common/model.js","common/path-finder.ts","common/selection-box.ts","common/diagram-base.ts","common/edge-base.ts","common/node-base.ts","system-context-diagram/actor-node.ts","common/binary-heap.ts","common/astar-path-finder.ts","system-context-diagram/system-actor-edge.ts","services/system-context-diagram-service.ts","system-context-diagram/system-context-diagram.ts","system-context-diagram/system-node.ts","main.ts","services/container-diagram-service.ts","nav-bar.ts","admin/admin.ts","component-diagram/component-node.ts","services/component-diagram-service.ts","component-diagram/component-diagram.ts","container-diagram/container-node.ts","container-diagram/container-diagram.ts","app.less","admin/admin.less","common/node-base.less","component-diagram/component-diagram.less","component-diagram/component-node.less","container-diagram/container-diagram.less","system-context-diagram/actor-node.less","system-context-diagram/system-context-diagram.less","system-context-diagram/system-node.less"],"names":[],"mappings":"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8B,0CAAe;YACH,4DAA2B;YAC/B,mDAAuB;OAR3D,gBAAgB,CAwD5B;IAxDY,4CAAgB;;;ACd7B;ACAA,EDCI,ICAA,QDAA;AEDJ,EDEQ,CCFL,SDEK,CCDJ;AFGJ,AGJA,EDEQ,KCFD,KDEC;ADFR,AGAA,EJKE,AEDM,ACHJ,CCDD,GHKC,KDAF,CCAQ,ECDF,ACHJ,IFIY,AGJZ,GHIe;AILnB,EJMQ,ADAN,AEDM,ACHJ,ACAI,KCFD,OLML,AIJM,CHIA,EEJJ,IDGI;AILR,EJMQ,AGLJ,CCDD,WDCC,ACAA,GJKI;ADNR,ADSA,AGTA,ACMA,AGNA,EFEI,ACAI,CFIL,GHEC,CERG,AIAA,KNQG,CKNF,IDAJ,CJMY,AGFE,GHEC,IEJf,ECGA,EDHG;ADMP,AMVA,EPSQ,ADCJ,AGLI,ACGA,AGPJ,CLSD,AMVA,QJQK,EFEK,ACLL,CIJJ,CNQI,AORJ,ONUA,KFDA;AKVJ,EHYQ,ACNA,AIJJ,ACAI,KHFD,OFMC,AKJA,GNUA,AKVJ,QFEA,IAAG;ALKP,EGCQ,AELA,QLOJ,GKPI,GFKA;AIVR,ACMA,EROQ,AKPA,CGAL,IDNI,OPaC,AKPA,CGAO,SACX,MDHA,IAAG;EPWC,AKLA,AELA,ACGA,SAAA,EDHA,EPUA,CKLA;ELMA,AOVA,YAAA,UPUA;EONA,cAAA","file":"app-bundle.js","sourcesContent":["import {Router, RouterConfiguration} from 'aurelia-router';\r\n\r\nexport class App {\r\n    router: Router;\r\n    \r\n    configureRouter(config: RouterConfiguration, router: Router) {\r\n        config.title = 'C3';\r\n        config.map([\r\n            { route: ['', 'system-context-diagram/:id'], name: 'system-context-diagram', \r\n              moduleId: 'system-context-diagram/system-context-diagram', title: 'System Context Diagram' },\r\n            { route: 'container-diagram/:id', name: 'container-diagram', \r\n              moduleId: 'container-diagram/container-diagram', title: 'Container Diagram' },\r\n            { route: 'component-diagram/:id', name: 'component-diagram', \r\n              moduleId: 'component-diagram/component-diagram', title: 'Component Diagram' },\r\n            { route: 'admin', name: 'admin', moduleId: 'admin/admin',\r\n              nav: true, title: 'Admin' }\r\n        ]);\r\n\r\n        this.router = router;\r\n    }\r\n}\r\n","export default {\n  debug: true,\n  testing: true\n};\n",null,"import {LogManager} from 'aurelia-framework';\r\nimport {Point} from './edge-base';\r\n\r\nconst logger = LogManager.getLogger('pathFinder');\r\n\r\nexport interface PathFinder {\r\n    findPath(sourceConnectionPoints: Point[], \r\n             targetConnectionPoints: Point[], diagram): Point[];\r\n}\r\n\r\nexport function cartesianProduct<T>(array: Array<Array<T>>): Array<Array<T>>\r\n{\r\n    const reduce = array.reduce((previousValue, currentValue) => {\r\n        const aMap = previousValue.map(value => {\r\n            const bMap = currentValue.map(innerValue => {\r\n                const concat = value.concat(innerValue);\r\n                return concat;\r\n            });\r\n            return bMap;\r\n        });\r\n        \r\n        const aMapReduce = aMap.reduce((innerPreviousValue, innerCurrentValue) => { \r\n            const concat = innerPreviousValue.concat(innerCurrentValue);\r\n            return concat; \r\n        }, []);\r\n\r\n        return aMapReduce;\r\n    }, [[]]);\r\n    return reduce;\r\n}\r\n\r\nexport function lengthOf(path: Point[]): number {\r\n    const length: number = path.reduce((previousValue, currentValue, currentIndex, array) => {\r\n        if (currentIndex === 0)\r\n            return 0;\r\n        \r\n        var a = currentValue.x - array[currentIndex-1].x;\r\n        var b = currentValue.y - array[currentIndex-1].y;\r\n\r\n        var currentLength = Math.sqrt( a*a + b*b );\r\n        return previousValue + currentLength;\r\n    }, 0);\r\n    \r\n    return length;\r\n}\r\n\r\nexport class StraightPathFinder implements PathFinder {\r\n    findPath(sourceConnectionPoints: Point[], \r\n             targetConnectionPoints: Point[], diagram): Point[] {\r\n        \r\n        const connectionPointCombinations = cartesianProduct([sourceConnectionPoints, targetConnectionPoints]);\r\n\r\n        const shortestConnectionPointCombination = connectionPointCombinations.reduce((previousShortestConnectionPoints, currentConnectionPoints) => {\r\n            const previousPath = this.findAPath(previousShortestConnectionPoints[0], previousShortestConnectionPoints[1]);\r\n            const currentPath = this.findAPath(currentConnectionPoints[0], currentConnectionPoints[1]);\r\n            \r\n            const previousLength = lengthOf(previousPath);\r\n            const currentLength = lengthOf(currentPath);\r\n            \r\n            const shorterPath = (currentLength < previousLength) ? currentConnectionPoints : previousShortestConnectionPoints;\r\n            return shorterPath;\r\n        });\r\n        \r\n        const path = this.findAPath(shortestConnectionPointCombination[0], shortestConnectionPointCombination[1]);\r\n        return path;\r\n    }\r\n    \r\n    private findAPath(sourcePoint: Point, targetPoint: Point): Point[] {\r\n        const directPath = [sourcePoint, targetPoint];\r\n        return directPath;\r\n    }\r\n}\r\n\r\nexport class PerpendicularPathFinder implements PathFinder {\r\n    private veryLongPath = [{x: 0, y: 0}, {x: 10000, y: 10000}];\r\n    \r\n    findPath(sourceConnectionPoints: Point[], \r\n             targetConnectionPoints: Point[], diagram): Point[] {\r\n        const connectionPointCombinations = cartesianProduct([sourceConnectionPoints, targetConnectionPoints]);\r\n\r\n        const shortestPath = connectionPointCombinations.reduce((previousShortestPath, currentConnectionPoints) => {\r\n            const currentShortestPath = this.findShortestPath(currentConnectionPoints[0], currentConnectionPoints[1]);\r\n            \r\n            const previousLength = lengthOf(previousShortestPath);\r\n            const currentLength = lengthOf(currentShortestPath);\r\n            \r\n            const shorterPath = (currentLength < previousLength) ? currentShortestPath : previousShortestPath;\r\n            return shorterPath;\r\n        }, this.veryLongPath);\r\n\r\n        // logger.debug(shortestPath);\r\n        return shortestPath;\r\n    }\r\n    \r\n    private findShortestPath(sourcePoint: Point, targetPoint: Point): Point[] {\r\n        const diffX = targetPoint.x - sourcePoint.x;\r\n        const diffY = targetPoint.y - sourcePoint.y;\r\n\r\n        if (diffX > diffY) {\r\n            const path1 = [sourcePoint, \r\n                    <Point>{x: sourcePoint.x + diffX/2, y: sourcePoint.y},\r\n                    <Point>{x: sourcePoint.x + diffX/2, y: targetPoint.y}, \r\n                    targetPoint]\r\n            return path1;\r\n        } else {\r\n            const path2 = [sourcePoint, \r\n                        <Point>{x: sourcePoint.x, y: sourcePoint.y + diffY/2},\r\n                        <Point>{x: targetPoint.x, y: sourcePoint.y + diffY/2}, \r\n                        targetPoint]\r\n            return path2;            \r\n        }\r\n    }\r\n}\r\n","import {autoinject} from 'aurelia-framework';\r\nimport {bindable} from \"aurelia-framework\";\r\n\r\n@autoinject\r\nexport class SelectionBox {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n    private startX: number;\r\n    private startY: number;\r\n    \r\n    constructor() {\r\n        this.width = 0;\r\n        this.height = 0;\r\n    }\r\n    \r\n    startPan(): void {\r\n        this.startX = this.x;\r\n        this.startY = this.y;\r\n    }\r\n    \r\n    pan(deltaX: number, deltaY: number): void {\r\n        if (deltaX >= 0) {\r\n            this.width = deltaX;\r\n        }\r\n        else {\r\n            this.x = this.startX + deltaX;\r\n            this.width = Math.abs(deltaX);\r\n        }\r\n        \r\n        if (deltaY >= 0) {\r\n            this.height = deltaY;\r\n        }\r\n        else {\r\n            this.y = this.startY + deltaY;\r\n            this.height = Math.abs(deltaY);\r\n        }\r\n    }\r\n    \r\n    containsRect(x: number, y: number, width: number, height: number): boolean {\r\n        let contains = x >= this.x && x+width < this.x+this.width &&\r\n                       y >= this.y && y+height < this.y+this.height;\r\n        return contains;\r\n    }\r\n}\r\n","import {NodeBase} from './node-base';\r\nimport {EdgeBase} from './edge-base';\r\nimport {SelectionBox} from './selection-box';\r\nimport 'hammerjs';\r\n\r\nexport class BoundingBox {\r\n    constructor(public x: number, public y: number, \r\n                public width: number, public height: number) {}\r\n}\r\n\r\nexport abstract class DiagramBase {\r\n    abstract getNodes(): NodeBase[];\r\n    abstract getEdges(): EdgeBase[];\r\n    \r\n    private isPanning: boolean;\r\n    private selectionBox: SelectionBox;\r\n\r\n    getBoundingBox(): BoundingBox {\r\n        const nodes = this.getNodes();\r\n        const edges = this.getEdges();\r\n        \r\n        let left: number;\r\n        let right: number;\r\n        let top: number;\r\n        let bottom: number;\r\n        \r\n        for (var node of nodes) {\r\n            if (!left || left > node.x )\r\n                left = node.x;\r\n            if (!right || right < node.x + node.width)\r\n                right = node.x + node.width - 1;\r\n            if (!top || top > node.y )\r\n                top = node.y;\r\n            if (!bottom || bottom < node.y + node.height)\r\n                bottom = node.y + node.height - 1;\r\n        }\r\n        \r\n        for (var edge of edges) {\r\n            for (var point of edge.path) {\r\n                if (!left || left > point.x)\r\n                    left = point.x;\r\n                if (!right || right < point.x)\r\n                    right = point.x;\r\n                if (!top || top > point.y)\r\n                    top = point.y;\r\n                if (!bottom || bottom < point.y)\r\n                    bottom = point.y;\r\n            }\r\n        }\r\n\r\n        if (!left || !right || !top || !bottom)\r\n            return new BoundingBox(0, 0, 0, 0);\r\n\r\n        const width = right - left + 1;\r\n        const height = bottom - top + 1;\r\n        \r\n        return new BoundingBox(left, top, width, height);\r\n    }\r\n\r\n    private unselectAll(): void {\r\n        for(var c of this.getNodes()) {\r\n            c.isSelected = false;\r\n        };\r\n    }\r\n    \r\n    private getContainerHit(x: number, y: number): NodeBase {\r\n        for(var c of this.getNodes()) {\r\n            if (c.isHit(x, y)) {\r\n                return c;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    protected attachHammerEventHandler(element: SVGElement) {\r\n        var self: DiagramBase = this;\r\n        var hammertime = new Hammer(element);\r\n        \r\n        hammertime.on('panstart', (event: HammerInput) => {\r\n            self.onPanStart(event, element);\r\n        });\r\n        \r\n        hammertime.on('pan', function(event: HammerInput) {\r\n            self.onPan(event);\r\n        });\r\n        \r\n        hammertime.on('panend', function(event: HammerInput) {\r\n            self.onPanEnd(event);\r\n        });\r\n        \r\n        hammertime.on('tap', function(event: HammerInput) {\r\n            self.onTap(event, element);\r\n        });\r\n    }\r\n    \r\n    private onPanStart(event: HammerInput, element: SVGElement) {\r\n        const clientRect = element.getBoundingClientRect();\r\n        const eventX = event.pointers[0].x - clientRect.left;\r\n        const eventY = event.pointers[0].y - clientRect.top;\r\n        \r\n        let containerHit = this.getContainerHit(eventX, eventY);\r\n        if (containerHit !== null) {\r\n            if (!containerHit.isSelected) {\r\n                if (!event.srcEvent.ctrlKey) {\r\n                    this.unselectAll();\r\n                }\r\n                containerHit.isSelected = true;\r\n            }\r\n            \r\n            for(var c of this.getNodes()) {\r\n                if (c.isSelected) {\r\n                    c.startPan();\r\n                }\r\n            }\r\n            this.isPanning = true;\r\n            return;\r\n        }\r\n        else {\r\n            this.unselectAll();\r\n            this.selectionBox = new SelectionBox();\r\n            this.selectionBox.x = eventX;\r\n            this.selectionBox.y = eventY;\r\n            this.selectionBox.startPan();\r\n        }\r\n    }\r\n    \r\n    private onPan(event: HammerInput) {\r\n        if (this.isPanning) {\r\n            for (var c of this.getNodes()) {\r\n                if (c.isSelected) {\r\n                    c.pan(event.deltaX, event.deltaY);\r\n                }\r\n            }\r\n\r\n            for (var e of this.getEdges()) {\r\n                e.updatePath();\r\n            }\r\n        }\r\n        else {\r\n            this.selectionBox.pan(event.deltaX, event.deltaY);\r\n            for(var c of this.getNodes()) {\r\n                c.isSelected = this.selectionBox.containsRect(c.x, c.y, c.width, c.height);\r\n            }\r\n        }\r\n    }\r\n    \r\n    private onPanEnd(event: HammerInput) {\r\n        if (this.isPanning) {\r\n            for(var c of this.getNodes()) {\r\n                if (c.isSelected) {\r\n                    c.endPan();\r\n                }\r\n            }\r\n            this.isPanning = false;\r\n            \r\n            for (var e of this.getEdges()) {\r\n                e.updatePath();\r\n            }\r\n        }\r\n        else {\r\n            this.selectionBox = null;\r\n        }\r\n    }\r\n    \r\n    private onTap(event: HammerInput, element: SVGElement) {\r\n        const clientRect = element.getBoundingClientRect();\r\n        const eventX = event.pointers[0].x - clientRect.left;\r\n        const eventY = event.pointers[0].y - clientRect.top;\r\n        \r\n        for(var c of this.getNodes()) {\r\n            if (c.isHit(eventX, eventY)) {\r\n                if (event.srcEvent.ctrlKey) {\r\n                    c.isSelected = !c.isSelected;\r\n                }\r\n                else {\r\n                    this.unselectAll();\r\n                    c.isSelected = true;\r\n                }\r\n                return;\r\n            }\r\n        }\r\n        \r\n        // no container hit\r\n        this.unselectAll();\r\n    }\r\n}\r\n","import {NodeBase} from './node-base';\r\nimport {PathFinder} from './path-finder';\r\nimport {DiagramBase} from './diagram-base';\r\n\r\nexport interface Point {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport abstract class EdgeBase {\r\n    path: Point[] = [];\r\n    sourceNode: NodeBase;\r\n    targetNode: NodeBase;\r\n    parentDiagram: DiagramBase;\r\n    \r\n    constructor(private pathFinder: PathFinder) {}\r\n\r\n    updatePath() {\r\n        if (this.areNodesOverlapping())\r\n            return;        \r\n \r\n        const sourceConnectionPoints = this.sourceNode.getConnectionPoints();\r\n        const targetConnectionPoints = this.targetNode.getConnectionPoints();\r\n        this.path = this.pathFinder.findPath(sourceConnectionPoints, targetConnectionPoints, this.parentDiagram);\r\n    }\r\n    \r\n    private areNodesOverlapping(): boolean {\r\n        const overlapping = \r\n               this.sourceNode.x + this.sourceNode.width > this.targetNode.x\r\n            && this.sourceNode.x < this.targetNode.x + this.targetNode.width\r\n            && this.sourceNode.y + this.sourceNode.height > this.targetNode.y\r\n            && this.sourceNode.y < this.targetNode.y + this.targetNode.height\r\n          \r\n        return overlapping;\r\n    }\r\n}\r\n","import {Point} from './edge-base';\r\n\r\nexport class NodeBase {\r\n    x: number;\r\n    y: number;\r\n    width: number;\r\n    height: number;\r\n\r\n    isSelected: boolean;\r\n    \r\n    private startX: number; \r\n    private startY: number;\r\n\r\n    isHit(x: number, y: number): boolean {\r\n        var hit = !(x < this.x || x >= this.x + this.width ||\r\n                  y < this.y || y >= this.y + this.height);\r\n        // var hit = x >= this.x && x < this.x + this.width &&\r\n        //           y >= this.y && y < this.y + this.height;\r\n        return hit;\r\n    }\r\n    \r\n    startPan(): void {\r\n        this.startX = this.x;\r\n        this.startY = this.y;\r\n    }\r\n    \r\n    pan(deltaX: number, deltaY: number): void {\r\n        let newX = this.startX + deltaX;\r\n        if (newX < 0)\r\n            newX = 0;\r\n        this.x = Math.round(newX/10)*10; // Lock nodes to a 10px grid \r\n        \r\n        let newY = this.startY + deltaY;\r\n        if (newY < 0)\r\n            newY = 0;\r\n        \r\n        this.y = Math.round(newY/10)*10; // Lock nodes to a 10px grid\r\n    }\r\n    \r\n    endPan() {\r\n        this.startX = undefined;\r\n        this.startY = undefined;\r\n    }\r\n    \r\n    getConnectionPoints(): Point[] {\r\n        const center = this.getCenter();\r\n        \r\n        const topCenter: Point = {\r\n            x: this.x + this.width / 2,\r\n            y: this.y\r\n        }\r\n\r\n        const bottomCenter: Point = {\r\n            x: this.x + this.width / 2,\r\n            y: this.y + this.height - 1\r\n        }\r\n\r\n        const leftCenter: Point = {\r\n            x: this.x,\r\n            y: this.y + this.height / 2\r\n        }\r\n\r\n        const rightCenter: Point = {\r\n            x: this.x + this.width - 1,\r\n            y: this.y + this.height / 2\r\n        }\r\n        \r\n        // Only use center for now.\r\n        return [center];\r\n    }\r\n    \r\n    private getCenter(): Point {\r\n        const centerX = this.x + this.width / 2;\r\n        const centerY = this.y + this.height / 2;\r\n        return {x: centerX, y: centerY}\r\n    }\r\n}\r\n","import {ActorNodeModel} from '../common/model';\r\nimport {NodeBase} from '../common/node-base';\r\nimport {SystemContextDiagram} from './system-context-diagram';\r\n\r\nexport class ActorNode extends NodeBase {\r\n    id: string;\r\n    name: string;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.width = 200;\r\n        this.height = 200;\r\n    }\r\n    \r\n    updateFromModel(model: ActorNodeModel): void {\r\n        this.id = model.id;\r\n        this.name = model.name;\r\n        this.x = model.x;\r\n        this.y = model.y;\r\n        this.width = model.width;\r\n        this.height = model.height;\r\n    }\r\n    \r\n    copyToModel(): ActorNodeModel {\r\n        let model = <ActorNodeModel>{};\r\n        model.id = this.id;\r\n        model.name = this.name;\r\n        model.x = this.x;\r\n        model.y = this.y;\r\n        model.width = this.width;\r\n        model.height = this.height;\r\n        return model;\r\n    }\r\n}","// Code adapted from https://github.com/bgrins/javascript-astar/blob/master/astar.js\r\nexport class BinaryHeap<T> {\r\n    private content: T[] = [];\r\n\r\n    constructor(private scoreFunction: (element: T) => number) {}\r\n    \r\n    push(element: T): void {\r\n        // Add the new element to the end of the array.\r\n        this.content.push(element);\r\n\r\n        // Allow it to sink down.\r\n        this.sinkDown(this.content.length - 1);\r\n    }\r\n\r\n    pop(): T {\r\n        // Store the first element so we can return it later.\r\n        var result = this.content[0];\r\n        // Get the element at the end of the array.\r\n        var end = this.content.pop();\r\n        // If there are any elements left, put the end element at the\r\n        // start, and let it bubble up.\r\n        if (this.content.length > 0) {\r\n            this.content[0] = end;\r\n            this.bubbleUp(0);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    remove(element: T): void {\r\n        var i = this.content.indexOf(element);\r\n\r\n        // When it is found, the process seen in 'pop' is repeated\r\n        // to fill up the hole.\r\n        var end = this.content.pop();\r\n\r\n        if (i !== this.content.length - 1) {\r\n            this.content[i] = end;\r\n\r\n            if (this.scoreFunction(end) < this.scoreFunction(element)) {\r\n                this.sinkDown(i);\r\n            } else {\r\n                this.bubbleUp(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    rescore(element: T) {\r\n        this.sinkDown(this.content.indexOf(element));\r\n    }\r\n    \r\n    get size(): number {\r\n        return this.content.length;\r\n    }\r\n\r\n    private sinkDown(n: number) {\r\n        // Fetch the element that has to be sunk.\r\n        var node = this.content[n];\r\n\r\n        // When at 0, an element can not sink any further.\r\n        while (n > 0) {\r\n\r\n            // Compute the parent element's index, and fetch it.\r\n            var parentN = ((n + 1) >> 1) - 1;\r\n            var parent = this.content[parentN];\r\n            // Swap the elements if the parent is greater.\r\n            if (this.scoreFunction(node) < this.scoreFunction(parent)) {\r\n                this.content[parentN] = node;\r\n                this.content[n] = parent;\r\n                // Update 'n' to continue at the new position.\r\n                n = parentN;\r\n            }\r\n            // Found a parent that is less, no need to sink any further.\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    \r\n    private bubbleUp(n: number): void {\r\n        // Look up the target element and its score.\r\n        var length = this.content.length;\r\n        var element = this.content[n];\r\n        var elemScore = this.scoreFunction(element);\r\n\r\n        while (true) {\r\n            // Compute the indices of the child elements.\r\n            var child2N = (n + 1) << 1;\r\n            var child1N = child2N - 1;\r\n            // This is used to store the new position of the element, if any.\r\n            var swap = null;\r\n            var child1Score;\r\n            // If the first child exists (is inside the array)...\r\n            if (child1N < length) {\r\n                // Look it up and compute its score.\r\n                var child1 = this.content[child1N];\r\n                child1Score = this.scoreFunction(child1);\r\n\r\n                // If the score is less than our element's, we need to swap.\r\n                if (child1Score < elemScore) {\r\n                    swap = child1N;\r\n                }\r\n            }\r\n\r\n            // Do the same checks for the other child.\r\n            if (child2N < length) {\r\n                var child2 = this.content[child2N];\r\n                var child2Score = this.scoreFunction(child2);\r\n                if (child2Score < (swap === null ? elemScore : child1Score)) {\r\n                    swap = child2N;\r\n                }\r\n            }\r\n\r\n            // If the element needs to be moved, swap it, and continue.\r\n            if (swap !== null) {\r\n                this.content[n] = this.content[swap];\r\n                this.content[swap] = element;\r\n                n = swap;\r\n            }\r\n            // Otherwise, we are done.\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {LogManager} from 'aurelia-framework';\r\nimport {PathFinder, cartesianProduct, lengthOf} from './path-finder';\r\nimport {Point} from './edge-base';\r\nimport {BinaryHeap} from './binary-heap';\r\nimport {DiagramBase, BoundingBox} from './diagram-base';\r\n\r\nconst logger = LogManager.getLogger('astar');\r\nconst gridSpacing = 10;\r\n\r\nclass Node implements Point {\r\n    x: number;\r\n    y: number;\r\n    visited = false;\r\n    closed: boolean = false;\r\n    parent: Node;\r\n    gScore = 0;\r\n    isOccupied = false\r\n    \r\n    constructor(point: Point) {\r\n        this.x = point.x;\r\n        this.y = point.y;\r\n    }\r\n    \r\n    fScore(endNode: Node): number {\r\n        const fScore = this.gScore + this.hScore(endNode);\r\n        return fScore;\r\n    };\r\n    \r\n    private _hScore;\r\n    private hScore(endNode: Node): number {\r\n        if (!this._hScore)\r\n            this._hScore = manhattanHeuristic(this, endNode);\r\n        return this._hScore;\r\n    }\r\n}\r\n\r\nclass GraphForDiagram {\r\n    // TODO: It would probably be much more efficient to use a sparse matrix \r\n    private grid: Node[][];\r\n    private diagramBoundingBox: BoundingBox;\r\n    \r\n    constructor(private diagram: DiagramBase) {\r\n        this.diagramBoundingBox = this.diagram.getBoundingBox();\r\n        this.buildGrid();\r\n    }\r\n    \r\n    getNode(point: Point): Node {\r\n        const x = point.x - this.diagramBoundingBox.x;\r\n        const y = point.y - this.diagramBoundingBox.y;\r\n        \r\n        const gridY = this.toGrid(y);\r\n        const gridX = this.toGrid(x);\r\n        const node = this.grid[gridY][gridX];\r\n        return node;\r\n    }\r\n    \r\n    getCost(node: Node, previousNode: Node, penultimateNode: Node): number {\r\n        // Does the node intersect with a different node?\r\n        if (node.isOccupied) {\r\n            return 1000;\r\n        }\r\n        \r\n        // Is the node in line with the last ones?\r\n        if (!previousNode || !penultimateNode\r\n         || node.x === previousNode.x && previousNode.x === penultimateNode.x \r\n         || node.y === previousNode.y && previousNode.y === penultimateNode.y )\r\n            return 1;\r\n        \r\n        // Take a turn.\r\n        return 10;\r\n    }\r\n    \r\n    getFullPath(endNode: Node): Point[] {\r\n        let currentNode = endNode;\r\n        const path: Point[] = [];\r\n        while (currentNode.parent) {\r\n            const point = <Point>{x: currentNode.x + this.diagramBoundingBox.x, \r\n                                  y: currentNode.y + this.diagramBoundingBox.y};\r\n            \r\n            path.unshift(point);\r\n            currentNode = currentNode.parent;\r\n        }\r\n        return path;\r\n    }\r\n    \r\n    private toGrid(value: number): number {\r\n        if (value % gridSpacing !== 0)\r\n            //throw `{value} is not within the grid`;\r\n            value = value - value % gridSpacing; // TODO: Use round of something more clever.\r\n\r\n        return value/gridSpacing;\r\n    }\r\n    \r\n    getNeighbors(node: Node): Node[] {\r\n        if (this.diagramBoundingBox.width === 0 || this.diagramBoundingBox.height === 0)\r\n            return [];\r\n        \r\n        let neighbors: Node[] = [];\r\n        \r\n        if (node.x > 0) {\r\n            const leftNeighbor = this.grid[this.toGrid(node.y)][this.toGrid(node.x) - 1];\r\n            neighbors.push(leftNeighbor);\r\n        }\r\n        if (node.x < this.diagramBoundingBox.width - 1) {\r\n            const rightNeighbor = this.grid[this.toGrid(node.y)][this.toGrid(node.x) + 1];\r\n            neighbors.push(rightNeighbor);\r\n        }\r\n        if (node.y > 0) {\r\n            const topNeighbor = this.grid[this.toGrid(node.y) - 1][this.toGrid(node.x)];\r\n            neighbors.push(topNeighbor);\r\n        }\r\n        if (node.y < this.diagramBoundingBox.height - 1) {\r\n            const bottomNeighbor = this.grid[this.toGrid(node.y) + 1][this.toGrid(node.x)];\r\n            neighbors.push(bottomNeighbor);\r\n        }\r\n        return neighbors;\r\n    }\r\n    \r\n    private buildGrid() {\r\n        this.grid = [];\r\n        for (var i=0; i <= this.diagramBoundingBox.height; i=i+gridSpacing) {\r\n            let row = [];\r\n            for (var j=0; j <= this.diagramBoundingBox.width; j=j+gridSpacing) {\r\n                const node = new Node({x: j, y: i});\r\n\r\n                node.isOccupied = this.isDiagramNodeHit(node);\r\n\r\n                row.push(node);\r\n            }\r\n            this.grid.push(row);\r\n        }\r\n    }\r\n\r\n    private isDiagramNodeHit(node: Node) {\r\n        const diagramX = node.x + this.diagramBoundingBox.x;\r\n        const diagramY = node.y + this.diagramBoundingBox.y;\r\n\r\n        const diagramNodes = this.diagram.getNodes();\r\n        for (var diagramNode of diagramNodes) {\r\n            if (diagramNode.isHit(diagramX, diagramY))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nfunction manhattanHeuristic(pos0: Point, pos1: Point): number {\r\n      var d1 = Math.abs(pos1.x - pos0.x);\r\n      var d2 = Math.abs(pos1.y - pos0.y);\r\n      return d1 + d2;\r\n}\r\n\r\n// Code adapted from https://github.com/bgrins/javascript-astar/blob/master/astar.js\r\nexport class AstarPathFinder implements PathFinder {\r\n    findPath(sourceConnectionPoints: Point[], \r\n             targetConnectionPoints: Point[], diagram: DiagramBase): Point[] {\r\n                 \r\n        const connectionPointCombinations = cartesianProduct([sourceConnectionPoints, targetConnectionPoints]);\r\n\r\n        const shortestConnectionPointCombination = connectionPointCombinations.reduce((previousShortestConnectionPoints, currentConnectionPoints) => {\r\n            const previousPath = this.findAPath(previousShortestConnectionPoints[0], previousShortestConnectionPoints[1], diagram);\r\n            const currentPath = this.findAPath(currentConnectionPoints[0], currentConnectionPoints[1], diagram);\r\n            \r\n            const previousLength = lengthOf(previousPath);\r\n            const currentLength = lengthOf(currentPath);\r\n            \r\n            const shorterPath = (currentLength < previousLength) ? currentConnectionPoints : previousShortestConnectionPoints;\r\n            return shorterPath;\r\n        });\r\n        \r\n        const path = this.findAPath(shortestConnectionPointCombination[0], shortestConnectionPointCombination[1], diagram);\r\n        \r\n        return path;\r\n    }\r\n    \r\n    private findAPath(sourcePoint: Point, targetPoint: Point, diagram: DiagramBase): Point[] {\r\n        const graph = new GraphForDiagram(diagram);\r\n        const heuristic = manhattanHeuristic;\r\n        \r\n        const startNode = graph.getNode(sourcePoint);\r\n        const endNode = graph.getNode(targetPoint); \r\n        const openHeap = new BinaryHeap<Node>(n => n.fScore(endNode));\r\n        let closestNode = startNode;\r\n        \r\n        // startNode.h = heuristic(sourcePoint, targetPoint);\r\n        \r\n        openHeap.push(startNode);\r\n        \r\n        let numTries = 0;\r\n\r\n        while (openHeap.size > 0) {\r\n            numTries++;\r\n            let currentNode = openHeap.pop();\r\n            \r\n            if (currentNode === endNode) {\r\n                console.debug(\"It took \" +  numTries + \" tries\");\r\n                return graph.getFullPath(currentNode);\r\n            }\r\n            currentNode.closed = true;\r\n            \r\n            const neighborNodes = graph.getNeighbors(currentNode);\r\n            \r\n            for (let neighborNode of neighborNodes) {\r\n                if (neighborNode.closed)\r\n                    continue;\r\n                \r\n                const tentative_gScore = currentNode.gScore + graph.getCost(neighborNode, currentNode, currentNode.parent);\r\n                const neighborVisited = neighborNode.visited;\r\n\r\n                if (!neighborVisited || tentative_gScore < neighborNode.gScore) {\r\n                    // Found an optimal (so far) path to this node.  Take score for node to see how good it is.\r\n                    neighborNode.parent = currentNode;\r\n                    neighborNode.gScore = tentative_gScore;\r\n                    \r\n                    if (!neighborVisited) {\r\n                        // Pushing to heap will put it in proper place based on the 'f' value.\r\n                        openHeap.push(neighborNode);\r\n                    } else {\r\n                        // Already seen the node, but since it has been rescored we need to reorder it in the heap\r\n                        openHeap.rescore(neighborNode);\r\n                    }\r\n                    \r\n                    neighborNode.visited = true;\r\n                }\r\n            }\r\n        }\r\n        \r\n        // TODO: error\r\n    }\r\n\r\n}","import {autoinject, computedFrom} from 'aurelia-framework';\r\nimport {EdgeBase} from '../common/edge-base';\r\nimport {StraightPathFinder, PerpendicularPathFinder} from '../common/path-finder';\r\nimport {AstarPathFinder} from '../common/astar-path-finder';\r\nimport {ActorNode} from './actor-node';\r\nimport {SystemNode} from './system-node';\r\nimport {SystemContextDiagram} from './system-context-diagram';\r\nimport {EdgeModel} from '../common/model';\r\n\r\n@autoinject\r\nexport class SystemActorEdge extends EdgeBase {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    parentDiagram: SystemContextDiagram;\r\n    sourceNode: ActorNode | SystemNode;\r\n    targetNode: ActorNode | SystemNode;\r\n    \r\n    constructor(pathFinder: AstarPathFinder) {\r\n        super(pathFinder);\r\n    }\r\n    \r\n    @computedFrom('path')\r\n    get svgPoints(): string {\r\n        const svgPath = this.path.map(p => `${p.x},${p.y}`).join(\" \");\r\n        return svgPath;\r\n    }\r\n    \r\n    attached(): void {\r\n        this.updatePath();\r\n    }\r\n    \r\n    updateFromModel(model: EdgeModel): void {\r\n        this.id = model.id;\r\n        this.name = model.name;\r\n        this.description = model.description;\r\n        this.sourceNode = this.parentDiagram.actorNodes.find(a => a.id === model.sourceNodeId) \r\n                       || this.parentDiagram.systemNodes.find(s => s.id === model.sourceNodeId);\r\n                       \r\n        this.targetNode = this.parentDiagram.systemNodes.find(s => s.id === model.targetNodeId)\r\n                       || this.parentDiagram.actorNodes.find(s => s.id === model.targetNodeId);\r\n    }\r\n    \r\n    copyToModel(): EdgeModel {\r\n        let model = <EdgeModel>{};\r\n        model.id = this.id;\r\n        model.name = this.name;\r\n        model.description = this.description;\r\n        model.sourceNodeId = this.sourceNode.id;\r\n        model.targetNodeId = this.targetNode.id;\r\n        return model;\r\n    }\r\n}\r\n","// import 'fetch';\r\n// import {HttpClient} from 'aurelia-fetch-client';\r\nimport {SystemContextDiagramModel, ContainerDiagramModel, \r\n        SystemNodeModel, ActorNodeModel, ContainerNodeModel, \r\n        ComponentDiagramModel, ComponentNodeModel, SystemActorEdgeModel} \r\n    from \"../common/model\";\r\n\r\nexport class SystemContextDiagramService {\r\n    private diagrams: SystemContextDiagramModel[];\r\n    \r\n    constructor() {\r\n        const systemNode1 = <SystemNodeModel>{\r\n            id: \"systemNode1\",\r\n            name: \"System Node 1\",\r\n            x: 20,\r\n            y: 20,\r\n            width: 200,\r\n            height: 200,\r\n            containerDiagramId: \"containerDiagram1\"\r\n        };\r\n        \r\n        const actorNode1 = <ActorNodeModel>{\r\n            id: \"actorNode1\",\r\n            name: \"Actor Node 1\",\r\n            x: 400,\r\n            y: 100,\r\n            width: 200,\r\n            height: 200\r\n        };\r\n        \r\n        const externalSystem1 = <SystemNodeModel>{\r\n            id: \"externalSystemNode1\",\r\n            name: \"External System Node 1\",\r\n            x: 20,\r\n            y: 250,\r\n            isExternalSystem: true,\r\n            width: 200,\r\n            height: 200\r\n        };\r\n        \r\n        const edge1 = <SystemActorEdgeModel>{\r\n            id: 'systemActorEdge1',\r\n            name: 'System Actor Edge 1',\r\n            sourceNodeId: 'systemNode1',\r\n            targetNodeId: 'actorNode1'\r\n        };\r\n\r\n        const diagram1 = <SystemContextDiagramModel>{\r\n            id: \"systemContextDiagram1\",\r\n            name: \"System Context Diagram 1\",\r\n            systemNodes: [systemNode1, externalSystem1],\r\n            actorNodes: [actorNode1],\r\n            edges: [edge1]\r\n        };\r\n        \r\n        const diagram2 = <SystemContextDiagramModel>{\r\n            id: \"systemContextDiagram2\",\r\n            name: \"System Context Diagram 2\",\r\n            systemNodes: [],\r\n            actorNodes: [],\r\n            edges: []\r\n        };\r\n        \r\n        this.diagrams = [diagram1, diagram2];\r\n    }\r\n    \r\n    getAll(): Promise<SystemContextDiagramModel[]> {\r\n        return new Promise(resolve => resolve(this.diagrams));\r\n    }\r\n    \r\n    // private loadFromId(id: number): Promise<SystemContextDiagramModel> {\r\n    //     const httpClient = new HttpClient();\r\n    //     httpClient.configure(config => config.withBaseUrl('api')\r\n    //                                          .rejectErrorResponses());\r\n\r\n    //     return httpClient.fetch(`/system/${id}`)\r\n    //                      .then(response => <Promise<SystemContextDiagramModel>>response.json());\r\n    // }\r\n}\r\n","import {autoinject, Container} from 'aurelia-framework';\r\nimport {Router} from 'aurelia-router';\r\nimport {EventAggregator} from 'aurelia-event-aggregator';\r\nimport {SystemNode} from './system-node';\r\nimport {ActorNode} from './actor-node';\r\nimport {SystemActorEdge} from './system-actor-edge';\r\nimport {SystemContextDiagramModel} from '../common/model';\r\nimport {DiagramBase} from '../common/diagram-base';\r\nimport {NodeBase} from '../common/node-base';\r\nimport {EdgeBase} from '../common/edge-base';\r\nimport {SystemContextDiagramService} from '../services/system-context-diagram-service'; \r\n\r\n@autoinject\r\nexport class SystemContextDiagram extends DiagramBase {\r\n    id: string;\r\n    name: string;\r\n    actorNodes: ActorNode[];    \r\n    systemNodes: SystemNode[];\r\n    systemActorEdges: SystemActorEdge[];\r\n    \r\n    private diagramElement: SVGElement;\r\n    \r\n    constructor(private eventAggregator: EventAggregator, \r\n                private router: Router,\r\n                private container: Container,\r\n                private systemContextDiagramService: SystemContextDiagramService) {\r\n        super();\r\n    }\r\n    \r\n    attached(): void {\r\n        this.attachHammerEventHandler(this.diagramElement);\r\n    }\r\n    \r\n    activate(params): void {\r\n        this.systemContextDiagramService.getAll().then(diagrams => {\r\n            let systemContextDiagramModel = diagrams.find(m => m.id === params.id);\r\n            \r\n            if (!systemContextDiagramModel) {\r\n                this.router.navigateToRoute('system-context-diagram', {'id': diagrams[0].id});\r\n                return;\r\n            }\r\n                        \r\n            this.updateFromModel(systemContextDiagramModel);                                             \r\n            this.eventAggregator.publish(\"SystemContextDiagramModelChanged\", systemContextDiagramModel);\r\n        });\r\n    }\r\n    \r\n    getNodes(): NodeBase[] {\r\n        let nodes = (<NodeBase[]>this.systemNodes)\r\n             .concat(<NodeBase[]>this.actorNodes);\r\n        return nodes;\r\n    }\r\n    \r\n    getEdges(): EdgeBase[] {\r\n        let edges = this.systemActorEdges;\r\n        return edges;\r\n    }\r\n    \r\n    updateFromModel(model: SystemContextDiagramModel): void {\r\n        this.id = model.id;\r\n        this.name = model.name;\r\n        this.actorNodes = model.actorNodes.map(nodeModel => {\r\n            let node = <ActorNode>this.container.get(ActorNode);\r\n            node.updateFromModel(nodeModel);\r\n            return node;\r\n        });\r\n        this.systemNodes = model.systemNodes.map(nodeModel => {\r\n            let node = <SystemNode>this.container.get(SystemNode);\r\n            node.updateFromModel(nodeModel);\r\n            return node;\r\n        });\r\n        this.systemActorEdges = model.edges.map(edgeModel => {\r\n           let connector = <SystemActorEdge>this.container.get(SystemActorEdge);\r\n           connector.parentDiagram = this;\r\n           connector.updateFromModel(edgeModel);\r\n           return connector;\r\n        });\r\n    }\r\n    \r\n    copyToModel(): SystemContextDiagramModel {\r\n        let model = <SystemContextDiagramModel>{};\r\n        model.id = this.id;\r\n        model.name = this.name;\r\n        model.actorNodes = this.actorNodes.map(node => node.copyToModel());\r\n        model.systemNodes = this.systemNodes.map(node => node.copyToModel());\r\n        model.edges = this.systemActorEdges.map(connector => connector.copyToModel());\r\n        return model;\r\n    }\r\n}\r\n","import {SystemNodeModel} from '../common/model';\r\nimport {NodeBase} from '../common/node-base';\r\nimport {SystemContextDiagram} from './system-context-diagram';\r\n\r\nexport class SystemNode extends NodeBase {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    isExternalSystem = false;\r\n    containerDiagramId: string;\r\n    \r\n    constructor() {\r\n        super();\r\n        this.width = 200;\r\n        this.height = 200;\r\n    }\r\n    \r\n    updateFromModel(model: SystemNodeModel): void {\r\n        this.id = model.id;\r\n        this.name = model.name;\r\n        this.x = model.x;\r\n        this.y = model.y;\r\n        this.width = model.width;\r\n        this.height = model.height;\r\n        this.isExternalSystem = model.isExternalSystem;\r\n        this.containerDiagramId = model.containerDiagramId;\r\n    }\r\n    \r\n    copyToModel(): SystemNodeModel {\r\n        let model = <SystemNodeModel>{};\r\n        model.id = this.id;\r\n        model.name = this.name;\r\n        model.x = this.x;\r\n        model.y = this.y;\r\n        model.width = this.width;\r\n        model.height = this.height;\r\n        model.isExternalSystem = this.isExternalSystem;\r\n        model.containerDiagramId = this.containerDiagramId;\r\n        return model;\r\n    }\r\n}\r\n","import {Aurelia} from 'aurelia-framework';\r\nimport {SystemNode} from './system-context-diagram/system-node';\r\n\r\nexport function configure(aurelia: Aurelia) {\r\n    aurelia.use\r\n        .standardConfiguration()\r\n        .developmentLogging();\r\n\r\n    aurelia.container.registerTransient(SystemNode);\r\n    \r\n    //Uncomment the line below to enable animation.\r\n    //aurelia.use.plugin('aurelia-animator-css');\r\n\r\n    //Anyone wanting to use HTMLImports to load views, will need to install the following plugin.\r\n    //aurelia.use.plugin('aurelia-html-import-template-loader')\r\n\r\n    aurelia.start().then(() => aurelia.setRoot());\r\n}\r\n","import * as Model from \"../common/model\";\r\n\r\nexport class ContainerDiagramService {\r\n    private diagrams: Model.ContainerDiagramModel[];\r\n    \r\n    constructor() {\r\n        const container1 = <Model.ContainerNodeModel>{\r\n            id: \"containerNode1\",\r\n            name: \"Container Node 1\",\r\n            x: 10,\r\n            y: 10,\r\n            width: 200,\r\n            height: 200,\r\n            description: \"Lorem ipsum dolor sit amet\",\r\n            componentDiagramId: \"componentDiagram1\"\r\n        };\r\n\r\n        const container2 = <Model.ContainerNodeModel>{\r\n            id: \"containerNode2\",\r\n            name: \"Container Node 2\",\r\n            x: 200,\r\n            y: 200,\r\n            width: 200,\r\n            height: 200,\r\n            description: \"Lorem ipsum dolor sit amet\",\r\n            componentDiagramId: 'componentDiagram1'\r\n        };\r\n        \r\n        const diagram1 = <Model.ContainerDiagramModel>{\r\n            id: \"containerDiagram1\",\r\n            name: \"Container Diagram 1\",\r\n            containerNodes: [container1, container2]\r\n        };\r\n        \r\n        const diagram2 = <Model.ContainerDiagramModel>{\r\n            id: \"containerDiagram2\",\r\n            name: \"Container Diagram 2\",\r\n            containerNodes: []\r\n        };\r\n        \r\n        this.diagrams = [diagram1, diagram2];\r\n    }\r\n    \r\n    getAll(): Promise<Model.ContainerDiagramModel[]> {\r\n        return new Promise(resolve => resolve(this.diagrams));\r\n    }\r\n}","import {autoinject} from 'aurelia-framework';\r\nimport {Router} from 'aurelia-router';\r\nimport {EventAggregator} from 'aurelia-event-aggregator';\r\nimport {SystemContextDiagramModel, ContainerDiagramModel, ComponentDiagramModel} from './common/model';\r\nimport {SystemContextDiagramService} from './services/system-context-diagram-service'; \r\nimport {ContainerDiagramService} from './services/container-diagram-service'; \r\n\r\n@autoinject\r\nexport class NavBar {\r\n    private systemContextDiagrams: SystemContextDiagramModel[] = [];\r\n    private currentSystemContextDiagram: SystemContextDiagramModel = null;\r\n\r\n    private containerDiagrams: ContainerDiagramModel[] = [];\r\n    private currentContainerDiagram: ContainerDiagramModel = null;\r\n\r\n    private componentDiagrams: ComponentDiagramModel[] = [];\r\n    private currentComponentDiagram: ComponentDiagramModel = null;\r\n    \r\n    constructor(private router: Router, \r\n                private eventAggregator: EventAggregator,\r\n                private systemContextDiagramService: SystemContextDiagramService,\r\n                private containerDiagramService: ContainerDiagramService) {\r\n                    \r\n        eventAggregator.subscribe(\"SystemContextDiagramModelChanged\", (model: SystemContextDiagramModel) => {\r\n            this.currentSystemContextDiagram = model;\r\n            this.currentContainerDiagram = null;\r\n            this.currentComponentDiagram = null;\r\n        });\r\n        eventAggregator.subscribe(\"ContainerDiagramModelChanged\", (model: ContainerDiagramModel) => {\r\n            this.currentContainerDiagram = model;\r\n            this.currentComponentDiagram = null;\r\n        });\r\n        eventAggregator.subscribe(\"ComponentDiagramModelChanged\", (model: ComponentDiagramModel) => {\r\n            this.currentComponentDiagram = model;\r\n        });\r\n    }\r\n\r\n    attached(): void {\r\n        this.systemContextDiagramService.getAll()\r\n            .then(diagrams => {\r\n                this.systemContextDiagrams = diagrams;\r\n            });\r\n        this.containerDiagramService.getAll()\r\n            .then(diagrams => {\r\n                this.containerDiagrams = diagrams;\r\n            });\r\n    }\r\n}","import {autoinject} from 'aurelia-framework';\r\nimport {Router} from 'aurelia-router';\r\nimport {EventAggregator} from 'aurelia-event-aggregator';\r\n// import 'fetch';\r\n// import {HttpClient} from 'aurelia-fetch-client';\r\nimport {SystemContextDiagramModel} from '../common/model';\r\nimport {SystemContextDiagramService} from '../services/system-context-diagram-service'; \r\n\r\n@autoinject\r\nexport class Admin {\r\n    private systemContextDiagrams: SystemContextDiagramModel[]; \r\n    \r\n    constructor(private router: Router,\r\n                private eventAggregator: EventAggregator, \r\n                private systemContextDiagramService: SystemContextDiagramService ) {\r\n    }\r\n    \r\n    activate(): void {\r\n        this.loadSystemContextDiagrams();\r\n        this.eventAggregator.publish(\"SystemContextDiagramModelChanged\", null);\r\n    }\r\n    \r\n    \r\n    private delete(): void {\r\n        alert(\"Delete\");\r\n    }\r\n    \r\n    private loadSystemContextDiagrams() {\r\n        this.systemContextDiagramService.getAll()\r\n            .then(diagrams => {\r\n                this.systemContextDiagrams = diagrams;\r\n            });\r\n        \r\n        /*let httpClient = new HttpClient();\r\n        httpClient.configure(config => config.withBaseUrl('api')\r\n                                             .rejectErrorResponses());\r\n\r\n        httpClient.fetch('/system')\r\n            .then(response => <Promise<SystemContextDiagramModel[]>>response.json())\r\n            .then(data => {\r\n                this.systemContextDiagrams = data.map(m => {\r\n                    let diagram = new SystemContextDiagram();\r\n                    diagram.updateFromModel(m);\r\n                    return diagram;\r\n                });\r\n            });*/\r\n    }\r\n}\r\n","import {NodeBase} from '../common/node-base';\r\nimport {ComponentNodeModel} from '../common/model';\r\n\r\nexport class ComponentNode extends NodeBase {\r\n    id: string;\r\n    name: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.width = 200;\r\n        this.height = 200;\r\n    }\r\n    \r\n    updateFromModel(model: ComponentNodeModel): void {\r\n        this.id = model.id;\r\n        this.name = model.name;\r\n        this.x = model.x;\r\n        this.y = model.y;\r\n        this.width = model.width;\r\n        this.height = model.height;\r\n    }\r\n    \r\n    copyToModel(): ComponentNodeModel {\r\n        let model = <ComponentNodeModel>{};\r\n        model.id = this.id;\r\n        model.name = this.name;\r\n        model.x = this.x;\r\n        model.y = this.y;\r\n        model.width = this.width;\r\n        model.height = this.height;\r\n        return model;\r\n    }\r\n}\r\n","import * as Model from \"../common/model\";\r\n\r\nexport class ComponentDiagramService {\r\n    private diagrams: Model.ComponentDiagramModel[];\r\n    \r\n    constructor() {\r\n        const componentNode = <Model.ComponentNodeModel>{\r\n            id: \"componentNode1\",\r\n            name: \"Component Node 1\",\r\n            x: 100,\r\n            y: 100\r\n        };\r\n        \r\n        const diagram = <Model.ComponentDiagramModel>{\r\n            id: \"componentDiagram1\",\r\n            name: \"Component Diagram 1\",\r\n            componentNodes: [componentNode]\r\n        };\r\n        \r\n        this.diagrams = [diagram]; \r\n    }\r\n    \r\n    getAll(): Promise<Model.ComponentDiagramModel[]> {\r\n        return new Promise(resolve => resolve(this.diagrams));\r\n    }\r\n}","import {autoinject} from 'aurelia-framework';\r\nimport {Container as DIContainer} from 'aurelia-dependency-injection';\r\nimport {EventAggregator} from 'aurelia-event-aggregator';\r\nimport {DiagramBase} from '../common/diagram-base';\r\nimport {NodeBase} from '../common/node-base';\r\nimport {EdgeBase} from '../common/edge-base';\r\nimport {ComponentNode} from './component-node';\r\nimport {SelectionBox} from '../common/selection-box';\r\nimport {ComponentDiagramModel} from '../common/model';\r\nimport {SystemContextDiagramService} from '../services/system-context-diagram-service';\r\nimport {ContainerDiagramService} from '../services/container-diagram-service';\r\nimport {ComponentDiagramService} from '../services/component-diagram-service';\r\nimport 'hammerjs';\r\n\r\n@autoinject\r\nexport class ComponentDiagram extends DiagramBase {\r\n    id: string;\r\n    name: string;\r\n    private componentNodes: ComponentNode[];\r\n    private diagramElement: SVGElement;\r\n    \r\n    constructor(private eventAggregator: EventAggregator,\r\n                private systemContextDiagramService: SystemContextDiagramService,\r\n                private containerDiagramService: ContainerDiagramService,\r\n                private componentDiagramService: ComponentDiagramService) {\r\n        super();\r\n    }\r\n    \r\n    activate(params): void {\r\n        this.systemContextDiagramService.getAll().then(diagrams => {\r\n            let systemContextDiagramModel = diagrams.find(m => m.id === params.systemContextDiagramId);            \r\n            this.eventAggregator.publish('SystemContextDiagramModelChanged', systemContextDiagramModel);\r\n        });\r\n        \r\n        this.containerDiagramService.getAll()\r\n            .then(diagrams => {\r\n                let containerDiagramModel = diagrams.find(m => m.id === params.containerDiagramId);\r\n                this.eventAggregator.publish('ContainerDiagramModelChanged', containerDiagramModel);\r\n            });\r\n\r\n        this.componentDiagramService.getAll()\r\n            .then(diagrams => {\r\n                let componentDiagramModel = diagrams.find(m => m.id === params.id);\r\n                this.updateFromModel(componentDiagramModel);                                         \r\n                this.eventAggregator.publish('ComponentDiagramModelChanged', componentDiagramModel);\r\n            });\r\n    }\r\n    \r\n    attached(): void {\r\n        this.attachHammerEventHandler(this.diagramElement);\r\n    }\r\n    \r\n    getNodes(): NodeBase[] {\r\n        let nodes = this.componentNodes;\r\n        return nodes;\r\n    }\r\n\r\n    getEdges(): EdgeBase[] {\r\n        return [];\r\n    }\r\n\r\n    updateFromModel(model: ComponentDiagramModel): void {\r\n        this.id = model.id;\r\n        this.name = model.name;\r\n        this.componentNodes = model.componentNodes.map(nodeModel => {\r\n            let node = new ComponentNode();\r\n            node.updateFromModel(nodeModel);\r\n            return node;\r\n        });\r\n    }\r\n    \r\n    copyToModel(): ComponentDiagramModel {\r\n        let model = <ComponentDiagramModel>{};\r\n        model.id = this.id;\r\n        model.name = this.name;\r\n        model.componentNodes = this.componentNodes.map(node => node.copyToModel());\r\n        return model;\r\n    }\r\n}\r\n","import {NodeBase} from '../common/node-base';\r\nimport {ContainerNodeModel} from '../common/model';\r\n\r\nexport class ContainerNode extends NodeBase {\r\n    id: string;\r\n    name: string;\r\n    description: string;\r\n    componentDiagramId: string;\r\n\r\n    constructor() {\r\n        super();\r\n        this.width = 200;\r\n        this.height = 200;\r\n    }\r\n    \r\n    updateFromModel(model: ContainerNodeModel): void {\r\n        this.id = model.id;\r\n        this.name = model.name;\r\n        this.x = model.x;\r\n        this.y = model.y;\r\n        this.width = model.width;\r\n        this.height = model.height;\r\n        this.componentDiagramId = model.componentDiagramId;\r\n    }\r\n    \r\n    copyToModel(): ContainerNodeModel {\r\n        let model = <ContainerNodeModel>{};\r\n        model.id = this.id;\r\n        model.name = this.name;\r\n        model.x = this.x;\r\n        model.y = this.y;\r\n        model.width = this.width;\r\n        model.height = this.height;\r\n        model.componentDiagramId = this.componentDiagramId;\r\n        return model;\r\n    }\r\n}\r\n","import {autoinject} from 'aurelia-framework';\r\nimport {Container as DIContainer} from 'aurelia-dependency-injection';\r\nimport {EventAggregator} from 'aurelia-event-aggregator';\r\nimport {DiagramBase} from '../common/diagram-base';\r\nimport {NodeBase} from '../common/node-base';\r\nimport {EdgeBase} from '../common/edge-base';\r\nimport {ContainerNode} from './container-node';\r\nimport {SelectionBox} from '../common/selection-box';\r\nimport {ContainerDiagramModel} from '../common/model';\r\nimport {SystemContextDiagramService} from \"../services/system-context-diagram-service\";\r\nimport {ContainerDiagramService} from \"../services/container-diagram-service\";\r\nimport 'hammerjs';\r\n\r\n@autoinject\r\nexport class ContainerDiagram extends DiagramBase {\r\n    id: string;\r\n    name: string;\r\n    private containerNodes: ContainerNode[];\r\n    private diagramElement: SVGElement;\r\n    \r\n    constructor(private eventAggregator: EventAggregator,\r\n                private systemContextDiagramService: SystemContextDiagramService,\r\n                private containerDiagramService: ContainerDiagramService) {\r\n        super();\r\n    };\r\n    \r\n    activate(params): void {\r\n        this.systemContextDiagramService.getAll().then(diagrams => {\r\n            let systemContextDiagramModel = diagrams.find(m => m.id === params.systemContextDiagramId);            \r\n            this.eventAggregator.publish(\"SystemContextDiagramModelChanged\", systemContextDiagramModel);\r\n        });\r\n        \r\n        this.containerDiagramService.getAll()\r\n            .then(diagrams => {\r\n                let containerDiagramModel = diagrams.find(m => m.id === params.id);\r\n                this.updateFromModel(containerDiagramModel);                                         \r\n                this.eventAggregator.publish(\"ContainerDiagramModelChanged\", containerDiagramModel);\r\n            });\r\n    }\r\n    \r\n    attached(): void {\r\n        this.attachHammerEventHandler(this.diagramElement);\r\n    }\r\n    \r\n    getNodes(): NodeBase[] {\r\n        let nodes = this.containerNodes;\r\n        return nodes;\r\n    }\r\n    \r\n    getEdges(): EdgeBase[] {\r\n        return [];\r\n    }\r\n    \r\n    updateFromModel(model: ContainerDiagramModel): void {\r\n        this.id = model.id;\r\n        this.name = model.name;\r\n        this.containerNodes = model.containerNodes.map(nodeModel => {\r\n            let node = new ContainerNode();\r\n            node.updateFromModel(nodeModel);\r\n            return node;\r\n        });\r\n    }\r\n    \r\n    copyToModel(): ContainerDiagramModel {\r\n        let model = <ContainerDiagramModel>{};\r\n        model.id = this.id;\r\n        model.name = this.name;\r\n        model.containerNodes = this.containerNodes.map(node => node.copyToModel());\r\n        return model;\r\n    }\r\n}\r\n","html {\r\n    height: 100%;\r\n}\r\n\r\nbody {\r\n  margin: 0;\r\n  height: 100%;\r\n}\r\n\r\n.page-host {\r\n    height: ~\"calc(100% - 68px)\"; //TODO: Should be 64px according to materialize css.\r\n    \r\n    router-view {\r\n        height: 100%;\r\n        \r\n        display: flex;\r\n        flex-direction: column;\r\n    }\r\n}",".admin {\r\n    table {\r\n        width: 90%;\r\n    }\r\n    \r\n    table thead tr td {\r\n        padding: 10px;\r\n    }\r\n    table tbody tr td {\r\n        padding: 10px;\r\n    }\r\n}\r\n","svg.node-base {\r\n    rect {\r\n        fill: grey;\r\n        // fill-opacity: 0.1;\r\n        stroke: grey;\r\n        stroke-opacity: 0.9;\r\n        stroke-width: 1;\r\n    }\r\n}\r\n\r\nsvg.node-base.selected {\r\n    rect {\r\n        stroke-width: 3;\r\n    }\r\n}\r\n","section.component-diagram {\r\n    height: 100%;\r\n    cursor: default;\r\n    \r\n    svg.diagram {\r\n        width: 100%;\r\n        height: 100%;\r\n        \r\n        // svg is an inline element by default, change this to block to prevent showing a scrollbar.\r\n        // See http://stackoverflow.com/a/5331225\r\n        display: block;\r\n    }\r\n}\r\n","﻿svg.component-node {\r\n    rect {\r\n        fill: orange;\r\n    }\r\n}\r\n\r\nsvg.component-node.external {\r\n    rect {\r\n        fill: red;\r\n    }\r\n}","section.container-diagram {\r\n    height: 100%;\r\n    cursor: default;\r\n    \r\n    svg.diagram {\r\n        width: 100%;\r\n        height: 100%;\r\n        \r\n        // svg is an inline element by default, change this to block to prevent showing a scrollbar.\r\n        // See http://stackoverflow.com/a/5331225\r\n        display: block;\r\n    }\r\n}\r\n","svg.actor-node {\r\n    rect {\r\n        fill: green;\r\n    }\r\n}\r\n","section.system-context-diagram {\r\n    height: 100%;\r\n    cursor: default;\r\n    \r\n    svg.diagram {\r\n        width: 100%;\r\n        height: 100%;\r\n        \r\n        // svg is an inline element by default, change this to block to prevent showing a scrollbar.\r\n        // See http://stackoverflow.com/a/5331225\r\n        display: block;\r\n    }\r\n}\r\n","svg.system-node {\r\n    rect {\r\n        fill: orange;\r\n    }\r\n}\r\n\r\nsvg.system-node.external {\r\n    rect {\r\n        fill: red;\r\n    }\r\n}"],"sourceRoot":"../src"}